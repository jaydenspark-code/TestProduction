-- =============================================================================
-- ADVERTISING PLATFORM MIGRATION FOR EARNPRO
-- =============================================================================
-- This migration adds advertising platform functionality to the database

-- Create additional enum types for advertising features
CREATE TYPE ad_activity_type AS ENUM ('view', 'click', 'complete', 'share', 'like');
CREATE TYPE ad_campaign_type AS ENUM ('display', 'video', 'interactive', 'survey');
CREATE TYPE ad_campaign_status AS ENUM ('draft', 'active', 'paused', 'completed', 'cancelled');

-- =============================================================================
-- ADVERTISING TABLES
-- =============================================================================

-- Ad Campaigns table (separate from referral campaigns)
CREATE TABLE ad_campaigns (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    advertiser_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    content JSONB NOT NULL DEFAULT '{}', -- Ad creative content (images, videos, text)
    target_audience JSONB DEFAULT '{}', -- Targeting criteria
    campaign_type ad_campaign_type NOT NULL DEFAULT 'display',
    budget DECIMAL(10,2) NOT NULL,
    cost_per_action DECIMAL(10,2) NOT NULL, -- CPA rate
    max_budget DECIMAL(10,2),
    daily_budget DECIMAL(10,2),
    frequency_cap INTEGER DEFAULT 3, -- Max times shown to same user per day
    status ad_campaign_status DEFAULT 'draft',
    start_date TIMESTAMP WITH TIME ZONE,
    end_date TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- User Activities table for ad interactions
CREATE TABLE user_activities (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    campaign_id UUID NOT NULL REFERENCES ad_campaigns(id) ON DELETE CASCADE,
    activity_type ad_activity_type NOT NULL,
    reward_amount DECIMAL(10,2) NOT NULL DEFAULT 0.00,
    metadata JSONB DEFAULT '{}', -- Additional tracking data
    ip_address INET,
    user_agent TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Ensure no duplicate activities for same user/campaign/type within time window
    CONSTRAINT unique_user_campaign_activity_per_day 
    UNIQUE (user_id, campaign_id, activity_type, DATE(created_at))
);

-- Campaign Metrics table for performance tracking
CREATE TABLE campaign_metrics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    campaign_id UUID NOT NULL REFERENCES ad_campaigns(id) ON DELETE CASCADE,
    date DATE NOT NULL DEFAULT CURRENT_DATE,
    total_views INTEGER DEFAULT 0,
    total_clicks INTEGER DEFAULT 0,
    total_completions INTEGER DEFAULT 0,
    total_shares INTEGER DEFAULT 0,
    total_likes INTEGER DEFAULT 0,
    unique_users INTEGER DEFAULT 0,
    total_spent DECIMAL(10,2) DEFAULT 0.00,
    total_earned DECIMAL(10,2) DEFAULT 0.00, -- User earnings from this campaign
    click_through_rate DECIMAL(5,4) DEFAULT 0.0000, -- CTR as percentage
    completion_rate DECIMAL(5,4) DEFAULT 0.0000, -- Completion rate as percentage
    average_engagement_time INTEGER DEFAULT 0, -- in seconds
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- One metrics record per campaign per day
    UNIQUE (campaign_id, date)
);

-- User Ad Frequency table to track ad exposure
CREATE TABLE user_ad_frequency (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    campaign_id UUID NOT NULL REFERENCES ad_campaigns(id) ON DELETE CASCADE,
    date DATE NOT NULL DEFAULT CURRENT_DATE,
    view_count INTEGER DEFAULT 0,
    last_shown_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- One record per user per campaign per day
    UNIQUE (user_id, campaign_id, date)
);

-- =============================================================================
-- INDEXES FOR PERFORMANCE
-- =============================================================================

-- Ad Campaigns indexes
CREATE INDEX idx_ad_campaigns_advertiser_id ON ad_campaigns(advertiser_id);
CREATE INDEX idx_ad_campaigns_status ON ad_campaigns(status);
CREATE INDEX idx_ad_campaigns_type ON ad_campaigns(campaign_type);
CREATE INDEX idx_ad_campaigns_dates ON ad_campaigns(start_date, end_date);

-- User Activities indexes
CREATE INDEX idx_user_activities_user_id ON user_activities(user_id);
CREATE INDEX idx_user_activities_campaign_id ON user_activities(campaign_id);
CREATE INDEX idx_user_activities_type ON user_activities(activity_type);
CREATE INDEX idx_user_activities_created_at ON user_activities(created_at);
CREATE INDEX idx_user_activities_user_campaign ON user_activities(user_id, campaign_id);

-- Campaign Metrics indexes
CREATE INDEX idx_campaign_metrics_campaign_id ON campaign_metrics(campaign_id);
CREATE INDEX idx_campaign_metrics_date ON campaign_metrics(date);

-- User Ad Frequency indexes
CREATE INDEX idx_user_ad_frequency_user_id ON user_ad_frequency(user_id);
CREATE INDEX idx_user_ad_frequency_campaign_id ON user_ad_frequency(campaign_id);
CREATE INDEX idx_user_ad_frequency_date ON user_ad_frequency(date);

-- =============================================================================
-- TRIGGERS FOR AUTO-UPDATING TIMESTAMPS
-- =============================================================================

CREATE TRIGGER update_ad_campaigns_updated_at 
    BEFORE UPDATE ON ad_campaigns
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_campaign_metrics_updated_at 
    BEFORE UPDATE ON campaign_metrics
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_ad_frequency_updated_at 
    BEFORE UPDATE ON user_ad_frequency
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- =============================================================================
-- FUNCTIONS FOR ADVERTISING LOGIC
-- =============================================================================

-- Function to record user activity and update metrics
CREATE OR REPLACE FUNCTION record_user_activity(
    p_user_id UUID,
    p_campaign_id UUID,
    p_activity_type ad_activity_type,
    p_reward_amount DECIMAL(10,2) DEFAULT 0.00,
    p_metadata JSONB DEFAULT '{}'
) RETURNS UUID AS $$
DECLARE
    activity_id UUID;
    current_date DATE := CURRENT_DATE;
BEGIN
    -- Insert user activity
    INSERT INTO user_activities (user_id, campaign_id, activity_type, reward_amount, metadata)
    VALUES (p_user_id, p_campaign_id, p_activity_type, p_reward_amount, p_metadata)
    RETURNING id INTO activity_id;
    
    -- Update campaign metrics
    INSERT INTO campaign_metrics (campaign_id, date)
    VALUES (p_campaign_id, current_date)
    ON CONFLICT (campaign_id, date) DO NOTHING;
    
    -- Update specific metric based on activity type
    CASE p_activity_type
        WHEN 'view' THEN
            UPDATE campaign_metrics 
            SET total_views = total_views + 1,
                updated_at = NOW()
            WHERE campaign_id = p_campaign_id AND date = current_date;
            
        WHEN 'click' THEN
            UPDATE campaign_metrics 
            SET total_clicks = total_clicks + 1,
                click_through_rate = CASE 
                    WHEN total_views > 0 THEN (total_clicks + 1.0) / total_views 
                    ELSE 0 
                END,
                updated_at = NOW()
            WHERE campaign_id = p_campaign_id AND date = current_date;
            
        WHEN 'complete' THEN
            UPDATE campaign_metrics 
            SET total_completions = total_completions + 1,
                completion_rate = CASE 
                    WHEN total_clicks > 0 THEN (total_completions + 1.0) / total_clicks 
                    ELSE 0 
                END,
                updated_at = NOW()
            WHERE campaign_id = p_campaign_id AND date = current_date;
            
        WHEN 'share' THEN
            UPDATE campaign_metrics 
            SET total_shares = total_shares + 1,
                updated_at = NOW()
            WHERE campaign_id = p_campaign_id AND date = current_date;
            
        WHEN 'like' THEN
            UPDATE campaign_metrics 
            SET total_likes = total_likes + 1,
                updated_at = NOW()
            WHERE campaign_id = p_campaign_id AND date = current_date;
    END CASE;
    
    -- Update total earned if there's a reward
    IF p_reward_amount > 0 THEN
        UPDATE campaign_metrics 
        SET total_earned = total_earned + p_reward_amount,
            updated_at = NOW()
        WHERE campaign_id = p_campaign_id AND date = current_date;
        
        -- Update user balance
        UPDATE users 
        SET balance = balance + p_reward_amount,
            updated_at = NOW()
        WHERE id = p_user_id;
        
        -- Record transaction
        INSERT INTO transactions (user_id, type, amount, description, status, reference)
        VALUES (p_user_id, 'earning', p_reward_amount, 
                CONCAT('Ad reward for ', p_activity_type, ' activity'), 'completed',
                CONCAT('ad_', activity_id));
    END IF;
    
    RETURN activity_id;
END;
$$ LANGUAGE plpgsql;

-- Function to check ad frequency cap
CREATE OR REPLACE FUNCTION can_show_ad(
    p_user_id UUID,
    p_campaign_id UUID
) RETURNS BOOLEAN AS $$
DECLARE
    campaign_frequency_cap INTEGER;
    user_view_count INTEGER;
    current_date DATE := CURRENT_DATE;
BEGIN
    -- Get campaign frequency cap
    SELECT frequency_cap INTO campaign_frequency_cap
    FROM ad_campaigns
    WHERE id = p_campaign_id AND status = 'active';
    
    IF campaign_frequency_cap IS NULL THEN
        RETURN FALSE; -- Campaign not found or not active
    END IF;
    
    -- Get user's view count for today
    SELECT view_count INTO user_view_count
    FROM user_ad_frequency
    WHERE user_id = p_user_id AND campaign_id = p_campaign_id AND date = current_date;
    
    -- If no record, user hasn't seen ad today
    IF user_view_count IS NULL THEN
        RETURN TRUE;
    END IF;
    
    -- Check if under frequency cap
    RETURN user_view_count < campaign_frequency_cap;
END;
$$ LANGUAGE plpgsql;

-- Function to update ad frequency
CREATE OR REPLACE FUNCTION update_ad_frequency(
    p_user_id UUID,
    p_campaign_id UUID
) RETURNS VOID AS $$
DECLARE
    current_date DATE := CURRENT_DATE;
BEGIN
    INSERT INTO user_ad_frequency (user_id, campaign_id, date, view_count, last_shown_at)
    VALUES (p_user_id, p_campaign_id, current_date, 1, NOW())
    ON CONFLICT (user_id, campaign_id, date) 
    DO UPDATE SET 
        view_count = user_ad_frequency.view_count + 1,
        last_shown_at = NOW(),
        updated_at = NOW();
END;
$$ LANGUAGE plpgsql;

-- =============================================================================
-- ROW LEVEL SECURITY
-- =============================================================================

ALTER TABLE ad_campaigns ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_activities ENABLE ROW LEVEL SECURITY;
ALTER TABLE campaign_metrics ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_ad_frequency ENABLE ROW LEVEL SECURITY;

-- Ad Campaigns policies
CREATE POLICY "Users can view active ad campaigns" ON ad_campaigns
    FOR SELECT USING (status = 'active');

CREATE POLICY "Advertisers can manage their campaigns" ON ad_campaigns
    FOR ALL USING (advertiser_id = auth.uid());

-- User Activities policies
CREATE POLICY "Users can view their own activities" ON user_activities
    FOR SELECT USING (user_id = auth.uid());

CREATE POLICY "Users can insert their own activities" ON user_activities
    FOR INSERT WITH CHECK (user_id = auth.uid());

-- Campaign Metrics policies
CREATE POLICY "Everyone can view campaign metrics" ON campaign_metrics
    FOR SELECT USING (true);

CREATE POLICY "Campaign owners can view detailed metrics" ON campaign_metrics
    FOR SELECT USING (
        campaign_id IN (
            SELECT id FROM ad_campaigns WHERE advertiser_id = auth.uid()
        )
    );

-- User Ad Frequency policies
CREATE POLICY "Users can view their own frequency data" ON user_ad_frequency
    FOR SELECT USING (user_id = auth.uid());

CREATE POLICY "System can manage frequency data" ON user_ad_frequency
    FOR ALL USING (true); -- This will be restricted to service role

-- =============================================================================
-- SAMPLE DATA
-- =============================================================================

-- Insert sample ad campaigns (only if admin user exists)
DO $$
DECLARE
    admin_user_id UUID;
BEGIN
    -- Find admin user
    SELECT id INTO admin_user_id FROM users WHERE email = 'admin@earnpro.org' LIMIT 1;
    
    -- If no admin user found, use the first user
    IF admin_user_id IS NULL THEN
        SELECT id INTO admin_user_id FROM users ORDER BY created_at LIMIT 1;
    END IF;
    
    -- Only insert if we found a user
    IF admin_user_id IS NOT NULL THEN
        INSERT INTO ad_campaigns (
            advertiser_id, 
            title, 
            description, 
            content,
            campaign_type,
            budget, 
            cost_per_action,
            daily_budget,
            frequency_cap,
            status
        ) VALUES
        (admin_user_id, 
         'EarnPro Mobile App Promotion', 
         'Promote our mobile app for better user engagement',
         '{"imageUrl": "/images/app-promo.jpg", "ctaText": "Download Now", "targetUrl": "https://earnpro.org/app"}',
         'display',
         5000.00, 
         0.50,
         100.00,
         3,
         'active'),

        (admin_user_id, 
         'Video Tutorial Series', 
         'Educational videos about maximizing earnings',
         '{"videoUrl": "/videos/tutorial-intro.mp4", "duration": 120, "ctaText": "Watch Full Series"}',
         'video',
         3000.00, 
         1.00,
         75.00,
         2,
         'active'),

        (admin_user_id, 
         'User Feedback Survey', 
         'Help us improve EarnPro with your feedback',
         '{"questions": ["How satisfied are you?", "What features do you want?"], "reward": 2.00}',
         'survey',
         1000.00, 
         2.00,
         50.00,
         1,
         'active');
    END IF;
END $$;