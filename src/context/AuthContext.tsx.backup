// Fixed AuthContext.tsx - simplified error handling and removed problematic dependencies
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { User } from '../types';
import { supabase } from '../lib/supabase';
import { createClient } from '@supabase/supabase-js';
import { authEmailService } from '../services/authEmailService-standalone';
import { UserIdSynchronizer } from '../utils/userIdSynchronizer';
import { showToast } from '../utils/toast';
import { handleApiError, getErrorMessage } from '../utils/errorHandling';

interface AuthContextType {
  user: User | null;
  login: (email: string, password: string) => Promise<{ success: boolean; requires2FA?: boolean; error?: string; user?: User }>;
  verify2FA: (token: string) => Promise<{ success: boolean; error?: string }>;
  register: (userData: Partial<User> & { password: string; email: string }) => Promise<{ success: boolean; error?: string }>;
  logout: () => Promise<{ success: boolean; error?: string }>;
  isAuthenticated: boolean;
  loading: boolean;
  refreshUser: () => Promise<{ success: boolean; error?: string }>;
  updateUser: (updates: Partial<User>) => Promise<{ success: boolean; error?: string }>;
  ensureUserProfileExists: () => Promise<{ success: boolean; error?: string }>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  // Global loading guard: block all children rendering until loading is false
  // Import LoadingSpinner dynamically to avoid circular deps
  const LoadingSpinner = React.useMemo(() => {
    try {
      // eslint-disable-next-line @typescript-eslint/no-var-requires
      return require('../components/Layout/LoadingSpinner').default;
    } catch {
      return () => <div>Loading...</div>;
    }
  }, []);

  // Helper function to ensure user profile exists in database
  const ensureUserProfileExists = async (): Promise<{ success: boolean; error?: string }> => {
    if (!supabase || !user) {
      return { success: false, error: 'No active session' };
    }

    try {
      // Check if profile exists
      const { data: existingProfile, error: checkError } = await supabase
        .from('users')
        .select('id')
        .eq('id', user.id)
        .single();

      if (checkError && checkError.code !== 'PGRST116') {
        console.error('‚ùå Error checking profile existence:', checkError);
        return { success: false, error: checkError.message };
      }

      if (existingProfile) {
        console.log('‚úÖ User profile already exists');
        return { success: true };
      }

      // Profile doesn't exist, create it
      console.log('üìù Creating user profile...');
      const profileData = {
        id: user.id,
        email: user.email,
        fullName: user.fullName,
        country: user.country,
        currency: user.currency || 'USD',
        referralCode: user.referralCode,
        role: user.role || 'user',
        isVerified: user.isVerified,
        isPaidUser: user.isPaidUser || false,
        isAdvertiser: user.isAdvertiser || false,
        isAgent: user.isAgent || false,
        createdAt: user.createdAt || new Date()
      };

      const { error: createError } = await supabase
        .from('users')
        .insert([profileData]);

      if (createError) {
        console.error('‚ùå Error creating user profile:', createError);
        return { success: false, error: createError.message };
      }

      console.log('‚úÖ User profile created successfully');
      return { success: true };

    } catch (error) {
      console.error('‚ùå Unexpected error in ensureUserProfileExists:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
    }
  };

  // Update user data
  const updateUser = async (updates: Partial<User>): Promise<{ success: boolean; error?: string }> => {
    try {
      if (!user) {
        return { success: false, error: 'No user logged in' };
      }

      console.log('üìù Updating user data:', updates);

      // Update in database if we have Supabase
      if (supabase) {
        const { error } = await supabase
          .from('users')
          .update(updates)
          .eq('id', user.id);

        if (error) {
          console.error('‚ùå Database update error:', error);
          
          // If user doesn't exist, try to create profile
          if (error.code === 'PGRST116') {
            console.log('üîß User profile missing, creating...');
            try {
              const profileData = {
                id: user.id,
                email: user.email,
                fullName: user.fullName,
                country: user.country,
                currency: user.currency || 'USD',
                referralCode: user.referralCode,
                role: user.role || 'user',
                isVerified: user.isVerified,
                isPaidUser: user.isPaidUser || false,
                isAdvertiser: user.isAdvertiser || false,
                isAgent: user.isAgent || false,
                createdAt: user.createdAt || new Date(),
                ...updates
              };

              const { error: createError } = await supabase
                .from('users')
                .insert([profileData]);

              if (createError) {
                console.error('‚ùå Profile creation failed:', createError);
                return { success: false, error: createError.message };
              }

              console.log('‚úÖ Profile created with updates');
            } catch (createError) {
              console.error('‚ùå Profile creation error:', createError);
              return { success: false, error: createError instanceof Error ? createError.message : 'Profile creation failed' };
            }
          } else {
            return { success: false, error: error.message };
          }
        }
      }

      // Update local state
      const updatedUser = { ...user, ...updates };
      setUser(updatedUser);
      console.log('‚úÖ User updated successfully');
      return { success: true };

    } catch (error) {
      console.error('‚ùå Update user error:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Update failed' };
    }
  };

  // Refresh user data from database
  const refreshUser = async (): Promise<{ success: boolean; error?: string }> => {
    if (!user?.id || !supabase) {
      return { success: false, error: 'No user session' };
    }

    try {
      console.log('üîÑ Refreshing user data...');
      
      // Get current auth user
      const { data: { user: authUser } } = await supabase.auth.getUser();
      
      if (!authUser) {
        console.log('‚ö†Ô∏è No auth user found');
        setUser(null);
        return { success: false, error: 'No authentication session' };
      }

      // Try to get profile from database
      let { data: profile, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', authUser.id)
        .single();

      if (error && error.code !== 'PGRST116') {
        // If ID lookup fails, try email lookup for cases where IDs don't match
        console.warn('‚ö†Ô∏è ID lookup failed, trying email lookup:', error.message);
        const { data: emailProfile, error: emailError } = await supabase
          .from('users')
          .select('*')
          .eq('email', authUser.email)
          .single();
          
        if (emailError) {
          console.error('‚ùå Error fetching profile by email:', emailError);
          return { success: false, error: emailError.message };
        }
        
        // Use the email-based profile but log the ID mismatch
        if (emailProfile && emailProfile.id !== authUser.id) {
          console.warn('‚ö†Ô∏è ID mismatch detected:', {
            authId: authUser.id,
            profileId: emailProfile.id,
            email: authUser.email
          });
        }
        
        profile = emailProfile;
      }

      let userData: User;

      if (profile) {
        // Use database profile with correct column mapping
        userData = {
          id: profile.id,
          email: profile.email,
          fullName: profile.full_name || profile.fullName || '', // Handle both column names
          country: profile.country || '',
          currency: profile.currency || 'USD',
          isVerified: profile.is_verified || profile.isVerified || !!authUser.email_confirmed_at,
          isPaidUser: profile.is_paid || profile.isPaidUser || false,
          referralCode: profile.referral_code || profile.referralCode || '',
          role: profile.role || 'user',
          isAdvertiser: profile.is_advertiser || profile.isAdvertiser || false,
          isAgent: profile.is_agent || profile.isAgent || false,
          createdAt: profile.created_at ? new Date(profile.created_at) : new Date(authUser.created_at)
        };
      } else {
        // If we still don't have database data, try the synchronizer
        console.log('üîç Attempting to fix user ID mismatch...');
        const syncResult = await UserIdSynchronizer.fixSingleUser(authUser.email!);
        
        if (syncResult.success) {
          console.log('‚úÖ Fixed user ID mismatch:', syncResult.message);
          
          // Try fetching user data again with the corrected ID
          const { data: correctedUserData, error: correctedError } = await supabase
            .from('users')
            .select('*')
            .eq('id', authUser.id)
            .single();
            
          if (!correctedError) {
            profile = correctedUserData;
          }
        }

        // Create from auth metadata if still no profile
        if (!profile) {
          const metadata = authUser.user_metadata || {};
          userData = {
            id: authUser.id,
            email: authUser.email!,
            fullName: metadata.full_name || metadata.name || '',
            country: metadata.country || '',
            currency: metadata.currency || 'USD',
            isVerified: !!authUser.email_confirmed_at,
            isPaidUser: false,
            referralCode: metadata.referral_code || `USR${Date.now().toString(36).toUpperCase()}`,
            role: 'user',
            isAdvertiser: false,
            isAgent: false,
            createdAt: new Date(authUser.created_at)
          };

          // Try to create profile in database
          try {
            const { error: createError } = await supabase
              .from('users')
              .insert([userData]);

            if (createError) {
              console.warn('‚ö†Ô∏è Could not create profile:', createError);
            } else {
              console.log('‚úÖ Profile created during refresh');
            }
          } catch (createError) {
            console.warn('‚ö†Ô∏è Profile creation warning:', createError);
          }
        } else {
          // Use the fixed profile data
          userData = {
            id: profile.id,
            email: profile.email,
            fullName: profile.full_name || profile.fullName || '',
            country: profile.country || '',
            currency: profile.currency || 'USD',
            isVerified: profile.is_verified || profile.isVerified || !!authUser.email_confirmed_at,
            isPaidUser: profile.is_paid || profile.isPaidUser || false,
            referralCode: profile.referral_code || profile.referralCode || '',
            role: profile.role || 'user',
            isAdvertiser: profile.is_advertiser || profile.isAdvertiser || false,
            isAgent: profile.is_agent || profile.isAgent || false,
            createdAt: profile.created_at ? new Date(profile.created_at) : new Date(authUser.created_at)
          };
        }
      }

      setUser(userData);
      console.log('‚úÖ User refreshed successfully');
      return { success: true };

    } catch (error) {
      console.error('‚ùå Refresh user error:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Refresh failed' };
    }
  };

  // Initialize auth state
  useEffect(() => {
    const initializeAuth = async () => {
      try {
        if (!supabase) {
          console.log('üß™ TESTING MODE: Auth initialization simulated');
          setLoading(false);
          return;
        }

        // Get initial session
        const { data: { session } } = await supabase.auth.getSession();
        
        if (session?.user) {
          await refreshUser();
        }
      } catch (error) {
        console.error('‚ùå Auth initialization error:', error);
      } finally {
        setLoading(false);
      }
    };

    initializeAuth();

    // Listen for auth changes
    if (supabase) {
      const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event: string, session: any) => {
        console.log('üîÑ Auth state change:', event);
        
        if (event === 'SIGNED_IN' && session?.user) {
          await refreshUser();
        } else if (event === 'SIGNED_OUT') {
          setUser(null);
        }
        setLoading(false);
      });

      return () => subscription.unsubscribe();
    }
    
    // Return empty cleanup function if no supabase
    return () => {};
  }, []);

  // Login function
  const login = async (email: string, password: string): Promise<{ success: boolean; requires2FA?: boolean; error?: string; user?: User }> => {
    setLoading(true);
    
    try {
      // Check for test accounts first
      const testAccounts = [
        { email: 'thearnest7@gmail.com', password: '1234567890', role: 'superadmin', fullName: 'The Earnest' },
        { email: 'ijaydenspark@gmail.com', password: '1234567890', role: 'agent', fullName: 'Jayden Spark' },
        { email: 'princeedie142@gmail.com', password: '1234567890', role: 'advertiser', fullName: 'Prince Edie' },
        { email: 'noguyliketrey@gmail.com', password: '1234567890', role: 'user', fullName: 'Noguyliketrey Trey' },
        { email: 'ernest.debrah@bluecrest.edu.gh', password: '1234567890', role: 'user', fullName: 'Ernest Debrah' }
      ];

      const testAccount = testAccounts.find(acc => acc.email === email && acc.password === password);
      
      if (testAccount) {
        console.log('üß™ TEST ACCOUNT LOGIN:', testAccount.email);
        // Create a mock user for testing
        const mockUser: User = {
          id: `test-${Date.now()}`,
          email: testAccount.email,
          fullName: testAccount.fullName,
          country: 'US',
          currency: 'USD',
          isVerified: true, // Auto-verify test accounts
          isPaidUser: true, // Auto-mark as paid for test accounts
          referralCode: `TEST${Date.now()}`,
          role: testAccount.role as any,
          isAdvertiser: testAccount.role === 'advertiser',
          isAgent: testAccount.role === 'agent',
          createdAt: new Date(),
        };
        
        setUser(mockUser);
        showToast.success(`Welcome back, ${testAccount.fullName}!`);
        return { success: true, user: mockUser };
      }

      if (!supabase) {
        console.log('üß™ TESTING MODE: Login simulated');
        return { success: true };
      }

      console.log('üîê Attempting login for:', email);

      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        console.error('‚ùå Login error:', error.message);
        showToast.error(error.message);
        return { success: false, error: error.message };
      }

      if (!data.user) {
        return { success: false, error: 'Login failed - no user data' };
      }

      console.log('‚úÖ Login successful - fetching user profile...');
      
      // Immediately fetch user profile data
      const { data: profile } = await supabase
        .from('users')
        .select('*')
        .eq('email', email)
        .single();

      let userData: User;
      
      if (profile) {
        userData = {
          id: profile.id,
          email: profile.email,
          fullName: profile.full_name || profile.fullName || '',
          country: profile.country || '',
          currency: profile.currency || 'USD',
          isVerified: profile.is_verified || profile.isVerified || !!data.user.email_confirmed_at,
          isPaidUser: profile.is_paid || profile.isPaidUser || false,
          referralCode: profile.referral_code || profile.referralCode || '',
          role: profile.role || 'user',
          isAdvertiser: profile.is_advertiser || profile.isAdvertiser || false,
          isAgent: profile.is_agent || profile.isAgent || false,
          createdAt: profile.created_at ? new Date(profile.created_at) : new Date()
        };
      } else {
        // Create user data from auth if no profile found
        userData = {
          id: data.user.id,
          email: data.user.email!,
          fullName: data.user.user_metadata?.full_name || '',
          country: '',
          currency: 'USD',
          isVerified: !!data.user.email_confirmed_at,
          isPaidUser: false, // Default to not paid
          referralCode: '',
          role: 'user',
          isAdvertiser: false,
          isAgent: false,
          createdAt: new Date()
        };
      }

      setUser(userData);
      console.log('‚úÖ User data set:', userData);
      showToast.success('Welcome back!');
      return { success: true, user: userData };

    } catch (error) {
      console.error('‚ùå Login error:', error);
      const apiError = handleApiError(error, { context: 'login' });
      const errorMessage = getErrorMessage(apiError);
      showToast.error(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setLoading(false);
    }
  };

  // 2FA verification
  const verify2FA = async (token: string): Promise<{ success: boolean; error?: string }> => {
    try {
      // For now, we'll use a simple token verification
      console.log('üîê 2FA verification for token:', token);
      
      if (!token || token.length !== 6) {
        const errorMessage = 'Invalid 2FA token format';
        showToast.error(errorMessage);
        return { success: false, error: errorMessage };
      }
      
      // Simulate 2FA verification - replace with actual implementation
      showToast.success('2FA verification successful');
      return { success: true };
    } catch (error) {
      console.error('‚ùå 2FA verification error:', error);
      const apiError = handleApiError(error, { context: '2FA verification' });
      const errorMessage = getErrorMessage(apiError);
      showToast.error(errorMessage);
      return { success: false, error: errorMessage };
    }
  };

  // Registration function
  const register = async (userData: Partial<User> & { password: string; email: string }): Promise<{ success: boolean; error?: string }> => {
    console.log('üéØ AuthContext register function called!');
    console.log('üìù Registration data received:', userData);
    
    setLoading(true);
    
    try {
      if (!supabase) {
        console.log('‚ö†Ô∏è Supabase not available - using testing mode');
        console.log('üß™ TESTING MODE: Registration simulated');
        setLoading(false);
        
        // Simulate successful registration for testing
        const mockUser: User = {
          id: `mock-${Date.now()}`,
          email: userData.email,
          fullName: userData.fullName || 'Test User',
          country: userData.country || 'US',
          currency: userData.currency || 'USD',
          isVerified: false,
          isPaidUser: false,
          referralCode: `TEST${Date.now()}`,
          role: 'user',
          isAdvertiser: false,
          isAgent: false,
          createdAt: new Date(),
        };
        
        setUser(mockUser);
        console.log('‚úÖ Mock user created:', mockUser);
        return { success: true };
      }

      console.log('‚úÖ Supabase client available:', !!supabase);
      console.log('üîÑ Starting REAL registration process...');
      console.log('ÔøΩ Testing CORS fix...');

      // Validate required fields
      if (!userData.email) {
        return { success: false, error: 'Email is required' };
      }
      if (!userData.fullName) {
        return { success: false, error: 'Full name is required' };
      }
      if (!userData.country) {
        return { success: false, error: 'Country is required' };
      }

      console.log('üìù Starting registration for:', userData.email);

      // Check if email already exists with better error handling
      try {
        const { data: existingUser, error: checkError } = await supabase
          .from('users')
          .select('id, email')
          .eq('email', userData.email)
          .single();

        if (checkError && checkError.code !== 'PGRST116') {
          console.warn('‚ö†Ô∏è Could not check for existing email:', checkError);
          // Continue with registration attempt - let database handle constraints
        }

        if (existingUser) {
          console.log('‚ùå Email already exists:', userData.email);
          return { success: false, error: 'This email is already registered. Please try logging in instead, or use a different email address.' };
        }
      } catch (emailCheckError) {
        console.warn('‚ö†Ô∏è Email check failed, continuing with registration:', emailCheckError);
        // Continue with registration - database constraints will catch duplicates
      }

      // Generate referral code
      const referralCode = `USR${Date.now().toString(36).toUpperCase()}`;
      
      // Manual user creation WITHOUT using supabase.auth.signUp to avoid native email verification
      console.log('üîÑ Creating user manually to bypass Supabase email verification...');
      
      // Generate a UUID for the user
      const userId = crypto.randomUUID();
      
      // Create service role client to bypass RLS policies
      const serviceRoleClient = createClient(
        'https://bmtaqilpuszwoshtizmq.supabase.co',
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJtdGFxaWxwdXN6d29zaHRpem1xIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzA5NDA2NCwiZXhwIjoyMDY4NjcwMDY0fQ.gdjAQb72tWoSw2Rf-1llfIDUB7rLFPoGb85ml7676B4',
        {
          auth: {
            autoRefreshToken: false,
            persistSession: false
          }
        }
      );
      
      // Note: We'll create privacy settings manually to avoid trigger RLS issues
      console.log('üîß Bypassing automatic privacy settings trigger by manual creation');
      
      // Create user record directly in the database (mapping to actual table columns)
      const { data: newUserData, error: createUserError } = await serviceRoleClient
        .from('users')
        .insert({
          id: userId,
          email: userData.email,
          full_name: userData.fullName,
          country: userData.country,
          currency: userData.currency || 'USD',
          referral_code: referralCode,
          phone: userData.phoneNumber,
          is_verified: false,
          is_paid: false,
          role: 'user',
          temp_password: userData.password, // Store password temporarily for auth creation after verification
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .select()
        .single();

      if (createUserError) {
        console.error('‚ùå Failed to create user:', createUserError);
        
        // Handle specific database constraint errors
        if (createUserError.code === '23505') {
          if (createUserError.message.includes('users_email_key')) {
            return { success: false, error: 'Email already registered. Please try logging in instead.' };
          }
          if (createUserError.message.includes('users_username_key')) {
            return { success: false, error: 'Username already taken. Please choose a different username.' };
          }
          return { success: false, error: 'Account with this information already exists. Please try logging in.' };
        }
        
        return { success: false, error: createUserError.message };
      }

      console.log('‚úÖ User created successfully:', newUserData.id);

      // Try to create privacy settings, but don't fail registration if it doesn't work
      try {
        console.log('üîß Attempting to create privacy settings for user:', newUserData.id);
        
        const { error: privacyError } = await serviceRoleClient
          .from('user_privacy_settings')
          .insert({
            user_id: newUserData.id,
            show_public_profile: true,
            show_network_overview: true,
            show_achievements: true,
            show_rank_history: true,
            show_activity: false,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          });

        if (privacyError) {
          console.warn('‚ö†Ô∏è Privacy settings creation failed, but continuing registration:', privacyError);
          // Registration continues - privacy settings can be created later
        } else {
          console.log('‚úÖ Privacy settings created successfully');
        }
      } catch (privacyCreateError: any) {
        console.warn('‚ö†Ô∏è Privacy settings creation error, but continuing registration:', privacyCreateError);
        // Registration continues regardless of privacy settings
      }

      // Create a mock data object that matches the expected structure
      const data = {
        user: {
          id: newUserData.id,
          email: newUserData.email
        }
      };

      if (data.user) {

        // Generate 6-character verification code (4 digits + 2 letters)
        const generateVerificationCode = () => {
          const digits = '0123456789';
          const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
          
          // Generate 4 random digits
          let code = '';
          for (let i = 0; i < 4; i++) {
            code += digits[Math.floor(Math.random() * digits.length)];
          }
          
          // Add 2 random letters
          for (let i = 0; i < 2; i++) {
            code += letters[Math.floor(Math.random() * letters.length)];
          }
          
          // Shuffle the string to mix digits and letters
          return code.split('').sort(() => Math.random() - 0.5).join('');
        };

        const verificationCode = generateVerificationCode();
        console.log('üîë Generated verification code:', verificationCode);

        // Store verification code via Edge Function to bypass RLS policies
        try {
          const { data: storeResponse, error: storeError } = await supabase.functions.invoke('store-verification-code', {
            body: {
              user_id: data.user.id,
              email: data.user.email,
              code: verificationCode,
              expires_at: new Date(Date.now() + 15 * 60 * 1000).toISOString() // 15 minutes
            }
          });

          if (storeError || !storeResponse?.success) {
            console.error('‚ùå Failed to store verification code via Edge Function:', storeError || storeResponse);
            
            // Fallback: Try direct database insertion with service role client
            console.log('üîÑ Attempting fallback: direct database insertion...');
            
            const serviceRoleClient = createClient(
              supabase.supabaseUrl,
              'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJtdGFxaWxwdXN6d29zaHRpem1xIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzA5NDA2NCwiZXhwIjoyMDY4NjcwMDY0fQ.gdjAQb72tWoSw2Rf-1llfIDUB7rLFPoGb85ml7676B4'
            );
            
            const { error: fallbackError } = await serviceRoleClient
              .from('email_verification_codes')
              .insert({
                user_id: data.user.id,
                email: data.user.email,
                code: verificationCode,
                expires_at: new Date(Date.now() + 15 * 60 * 1000).toISOString(),
                created_at: new Date().toISOString()
              });

            if (fallbackError) {
              console.error('‚ùå Fallback also failed:', fallbackError);
              showToast.error('Failed to store verification code. Please contact support.');
              return { success: false, error: 'Failed to store verification code' };
            }
            
            console.log('‚úÖ Verification code stored via fallback method');
          } else {
            console.log('‚úÖ Verification code stored successfully via Edge Function');
          }
        } catch (codeError) {
          console.error('‚ùå Error calling store-verification-code Edge Function:', codeError);
          showToast.error('Failed to store verification code. Registration cannot continue.');
          return { success: false, error: 'Failed to store verification code' };
        }

        // Send custom verification email using our Edge Function
        try {
          const { data: emailResult, error: emailError } = await supabase.functions.invoke('send-verification-email', {
            body: {
              email: data.user.email!,
              fullName: userData.fullName,
              verificationCode: verificationCode
            }
          });

          if (emailError || (emailResult && emailResult.success === false)) {
            console.error('‚ùå Email Edge Function returned error:', emailError || emailResult);
            showToast.error('Failed to send verification email: ' + (emailError?.message || emailResult?.error || 'Unknown error'));
            return { success: false, error: 'Failed to send verification email' };
          }
          console.log('‚úÖ Verification email sent successfully via Edge Function');
        } catch (emailError) {
          console.error('‚ùå Failed to call email Edge Function:', emailError);
          showToast.error('Failed to send verification email. Please try again.');
          return { success: false, error: 'Failed to send verification email' };
        }

        // Set user in context
        const newUser: User = {
          id: data.user.id,
          email: data.user.email!,
          fullName: userData.fullName,
          country: userData.country,
          currency: userData.currency || 'USD',
          isVerified: false, // Always false for manual creation since we need email verification
          isPaidUser: false,
          referralCode,
          role: 'user',
          isAdvertiser: false,
          isAgent: false,
          createdAt: new Date(),
        };
        
        setUser(newUser);
        
        // Store for resend functionality
        localStorage.setItem('registrationEmail', data.user.email!);
        localStorage.setItem('registrationFullName', userData.fullName);
        
        showToast.success('Registration successful! Please check your email to verify your account.');
        return { success: true };
      }

      return { success: false, error: 'Registration failed - no user data returned' };
      
    } catch (error) {
      console.error('‚ùå Registration error:', error);
      const apiError = handleApiError(error, { context: 'registration' });
      const errorMessage = getErrorMessage(apiError);
      showToast.error(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setLoading(false);
    }
  };

  // Logout function
  const logout = async (): Promise<{ success: boolean; error?: string }> => {
    try {
      if (!supabase) {
        console.log('üß™ TESTING MODE: Logout simulated');
        setUser(null);
        showToast.success('Logged out successfully');
        return { success: true };
      }

      const { error } = await supabase.auth.signOut();
      
      if (error) {
        console.error('‚ùå Logout error:', error);
        showToast.error(error.message);
        return { success: false, error: error.message };
      }

      setUser(null);
      localStorage.removeItem('registrationEmail');
      localStorage.removeItem('registrationFullName');
      console.log('‚úÖ Logout successful');
      showToast.success('Logged out successfully');
      return { success: true };
      
    } catch (error) {
      console.error('‚ùå Logout error:', error);
      const apiError = handleApiError(error, { context: 'logout' });
      const errorMessage = getErrorMessage(apiError);
      showToast.error(errorMessage);
      return { success: false, error: errorMessage };
    }
  };

  const isAuthenticated = !!user;

  if (loading) {
    // Block all children rendering until loading is false
    return <LoadingSpinner message="Loading your account..." />;
  }

  return (
    <AuthContext.Provider
      value={{
        user,
        login,
        verify2FA,
        register,
        logout,
        isAuthenticated,
        loading,
        refreshUser,
        updateUser,
        ensureUserProfileExists,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};
